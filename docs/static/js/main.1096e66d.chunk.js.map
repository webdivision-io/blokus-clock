{"version":3,"sources":["components/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["Timer","intervalId","timerId","Date","now","state","value","_this","props","initialValue","handleButtonClick","onTimerClick","startTimer","setInterval","setState","prevState","clearInterval","isActive","active","checkIfActive","this","seconds","classes","classnames","timer--active","react_default","a","createElement","onClick","className","Intl","DateTimeFormat","minute","second","format","React","Component","App","version","handleTimerClick","handlePause","handleReset","_this$state","key","src_components_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAkFeA,6MA1EXC,WAAa,OACbC,QAAUC,KAAKC,QAEfC,MAAQ,CACJC,MAAOC,EAAKC,MAAMC,gBAGtBC,kBAAoB,YAGhBC,EAFyBJ,EAAKC,MAAtBG,cAEKJ,EAAKL,SAElBK,EAAKK,gBAGTA,WAAa,WACT,IAAIL,EAAKN,WAAT,CADe,IAKPK,EAAUC,EAAKF,MAAfC,MAEJA,EAAQ,IACRC,EAAKN,WAAaY,YAAY,WAC1BN,EAAKO,SACD,SAAAC,GAAS,MAAK,CAAET,MAAOS,EAAUT,MAAQ,IACzC,WACkB,IAAVA,GACAU,cAAcT,EAAKN,eAIhC,UAUXgB,SAAW,WAEP,OADmBV,EAAKC,MAAhBU,SACUX,EAAKL,WAG3BiB,cAAgB,WACRZ,EAAKU,WACLV,EAAKK,aAILL,EAAKN,aACLe,cAAcT,EAAKN,YACnBM,EAAKN,WAAa,6FAlBlBmB,KAAKnB,YACLe,cAAcI,KAAKnB,6CAqBlB,IACGK,EAAUc,KAAKf,MAAfC,MAERc,KAAKD,gBAEL,IApEWE,EAoELC,EAAUC,IAAW,QAAS,CAAEC,gBAAiBJ,KAAKH,aAE5D,OACIQ,EAAAC,EAAAC,cAAA,UAAQC,QAASR,KAAKV,kBAAmBmB,UAAWP,GAChDG,EAAAC,EAAAC,cAAA,aAxEGN,EAwEef,EAvE9B,IAAIwB,KAAKC,eAAe,QAAS,CAAEC,OAAQ,UAAWC,OAAQ,YAAaC,OAAO,IAAI/B,KAAe,IAAVkB,cAE3Ec,IAAMC,WC+BXC,oNAjCXhC,MAAQ,CACJa,OAAQ,KACRoB,QAAS,KAGbC,iBAAmB,SAAArC,GACfK,EAAKO,SAAS,CAAEI,OAAQhB,OAG5BsC,YAAc,WACVjC,EAAKO,SAAS,CAAEI,OAAQ,UAG5BuB,YAAc,WACVlC,EAAKO,SAAS,SAAAC,GAAS,MAAK,CAAEuB,QAASvB,EAAUuB,QAAU,8EAGtD,IAAAI,EACuBtB,KAAKf,MAAzBa,EADHwB,EACGxB,OAAQoB,EADXI,EACWJ,QAEhB,OACIb,EAAAC,EAAAC,cAAA,OAAKgB,IAAKL,EAAST,UAAU,OACzBJ,EAAAC,EAAAC,cAACiB,EAAD,CAAOjC,aAAcS,KAAKmB,iBAAkBrB,OAAQA,EAAQT,aAAc,OAC1EgB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,UAAQC,QAASR,KAAKoB,aAAtB,SACAf,EAAAC,EAAAC,cAAA,UAAQC,QAASR,KAAKqB,aAAtB,UAEJhB,EAAAC,EAAAC,cAACiB,EAAD,CAAOjC,aAAcS,KAAKmB,iBAAkBrB,OAAQA,EAAQT,aAAc,eA5BxE0B,IAAMC,kBCQJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1096e66d.chunk.js","sourcesContent":["import React from 'react';\nimport './Timer.css';\nimport classnames from 'classnames';\n\nconst formatTime = seconds =>\n    new Intl.DateTimeFormat('pl-PL', { minute: 'numeric', second: 'numeric' }).format(new Date(seconds * 1000));\n\nclass Timer extends React.Component {\n    intervalId = null;\n    timerId = Date.now();\n\n    state = {\n        value: this.props.initialValue\n    };\n\n    handleButtonClick = () => {\n        const { onTimerClick } = this.props;\n\n        onTimerClick(this.timerId);\n\n        this.startTimer();\n    };\n\n    startTimer = () => {\n        if (this.intervalId) {\n            return;\n        }\n\n        const { value } = this.state;\n\n        if (value > 0) {\n            this.intervalId = setInterval(() => {\n                this.setState(\n                    prevState => ({ value: prevState.value - 1 }),\n                    () => {\n                        if (value === 0) {\n                            clearInterval(this.intervalId);\n                        }\n                    }\n                );\n            }, 1000);\n        }\n    };\n\n    componentWillUnmount() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n        }\n    }\n\n    isActive = () => {\n        const { active } = this.props;\n        return active === this.timerId;\n    };\n\n    checkIfActive = () => {\n        if (this.isActive()) {\n            this.startTimer();\n            return;\n        }\n\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n        }\n    };\n\n    render() {\n        const { value } = this.state;\n\n        this.checkIfActive();\n\n        const classes = classnames('timer', { 'timer--active': this.isActive() });\n\n        return (\n            <button onClick={this.handleButtonClick} className={classes}>\n                <span>{formatTime(value)}</span>\n            </button>\n        );\n    }\n}\n\nexport default Timer;\n","import React from 'react';\nimport Timer from './Timer';\nimport './App.css';\n\nclass App extends React.Component {\n    state = {\n        active: null,\n        version: 0\n    };\n\n    handleTimerClick = timerId => {\n        this.setState({ active: timerId });\n    };\n\n    handlePause = () => {\n        this.setState({ active: null });\n    };\n\n    handleReset = () => {\n        this.setState(prevState => ({ version: prevState.version + 1 }));\n    };\n\n    render() {\n        const { active, version } = this.state;\n\n        return (\n            <div key={version} className=\"App\">\n                <Timer onTimerClick={this.handleTimerClick} active={active} initialValue={1200} />\n                <div className=\"controls\">\n                    <button onClick={this.handlePause}>PAUSE</button>\n                    <button onClick={this.handleReset}>RESET</button>\n                </div>\n                <Timer onTimerClick={this.handleTimerClick} active={active} initialValue={1200} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}